<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny-Zhao&#39;s TechBlog</title>
  
  <subtitle>KEEP FIGHTING</subtitle>
  <link href="https://zjncs.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjncs.github.io/"/>
  <updated>2025-08-07T09:05:02.307Z</updated>
  <id>https://zjncs.github.io/</id>
  
  <author>
    <name>Johnny-Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>链表排序0807</title>
    <link href="https://zjncs.github.io/2025/08/07/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0807/"/>
    <id>https://zjncs.github.io/2025/08/07/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0807/</id>
    <published>2025-08-07T08:32:08.000Z</published>
    <updated>2025-08-07T09:05:02.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-0021-合并两个有序链表"><a href="#2-0021-合并两个有序链表" class="headerlink" title="2.0021. 合并两个有序链表"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_2-0021-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">2.</a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">0021. 合并两个有序链表</a></h2><h3 id="2-1-题目大意"><a href="#2-1-题目大意" class="headerlink" title="2.1 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_21-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">2.1 题目大意</a></h3><p><strong>描述</strong>：给定两个升序链表的头节点 <code>list1</code> 和 <code>list2</code>。</p><p><strong>要求</strong>：将其合并为一个升序链表。</p><p><strong>说明</strong>：</p><ul><li><strong>两个链表的节点数目范围是 。</strong></li><li><code>list1</code> 和 <code>list2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><p><strong>示例</strong>：</p><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024002101.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 输入：list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line"> 输出：[1,1,2,3,4,4]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 输入：list1 = [], list2 = []</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> class ListNode:</span><br><span class="line">     def __init__(self, val=0, next=None):</span><br><span class="line">         self.val = val</span><br><span class="line">         self.next = next</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class Solution:</span><br><span class="line">     def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         # 创建一个哑节点 dummy，它的 next 最后会指向合并后的链表头</span><br><span class="line">         dummy = ListNode(-1)</span><br><span class="line">         current = dummy</span><br><span class="line"> </span><br><span class="line">         # 遍历两个链表，哪个值小就接到 current 后面</span><br><span class="line">         while list1 and list2:</span><br><span class="line">             if list1.val &lt;= list2.val:</span><br><span class="line">                 current.next = list1</span><br><span class="line">                 list1 = list1.next</span><br><span class="line">             else:</span><br><span class="line">                 current.next = list2</span><br><span class="line">                 list2 = list2.next</span><br><span class="line">             current = current.next  # 移动 current 指针</span><br><span class="line"> </span><br><span class="line">         # 把剩余的链表接上（最多只有一个不为 None）</span><br><span class="line">         current.next = list1 if list1 else list2</span><br><span class="line"> </span><br><span class="line">         # 返回合并后的链表头</span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>**在新建链表的时候，我们可以选择用哑节点加指针的方式来简化代码逻辑。哑节点是一个不存储实际数据的节点，它的 **<code>next</code> 最终会指向合并后的链表头。</p><h2 id="3-0148-排序链表"><a href="#3-0148-排序链表" class="headerlink" title="3.0148. 排序链表"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_3-0148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8">3.</a><a href="https://leetcode.cn/problems/sort-list/">0148. 排序链表</a></h2><h3 id="3-1-题目大意"><a href="#3-1-题目大意" class="headerlink" title="3.1 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_31-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">3.1 题目大意</a></h3><p><strong>描述</strong>：给定链表的头节点 <code>head</code>。</p><p><strong>要求</strong>：按照升序排列并返回排序后的链表。</p><p><strong>说明</strong>：</p><ul><li><strong>链表中节点的数目在范围 内。</strong></li></ul><p><strong>示例</strong>：</p><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024014801.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [4,2,1,3]</span><br><span class="line"> 输出：[1,2,3,4]Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024014802.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [-1,5,3,4,0]</span><br><span class="line"> 输出：[-1,0,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>解法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> class Solution:</span><br><span class="line">     def sortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         # Base case</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line"> </span><br><span class="line">         # Step 1: Split the list into two halves</span><br><span class="line">         slow, fast = head, head.next</span><br><span class="line">         while fast and fast.next:</span><br><span class="line">             slow = slow.next</span><br><span class="line">             fast = fast.next.next</span><br><span class="line"> </span><br><span class="line">         mid = slow.next</span><br><span class="line">         slow.next = None  # Cut the list</span><br><span class="line"> </span><br><span class="line">         # Step 2: Sort each half recursively</span><br><span class="line">         left = self.sortList(head)</span><br><span class="line">         right = self.sortList(mid)</span><br><span class="line"> </span><br><span class="line">         # Step 3: Merge the sorted halves</span><br><span class="line">         return self.merge(left, right)</span><br><span class="line"> </span><br><span class="line">     def merge(self, list1: ListNode, list2: ListNode) -&gt; ListNode:</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         tail = dummy</span><br><span class="line"> </span><br><span class="line">         while list1 and list2:</span><br><span class="line">             if list1.val &lt;= list2.val:</span><br><span class="line">                 tail.next = list1</span><br><span class="line">                 list1 = list1.next</span><br><span class="line">             else:</span><br><span class="line">                 tail.next = list2</span><br><span class="line">                 list2 = list2.next</span><br><span class="line">             tail = tail.next</span><br><span class="line"> </span><br><span class="line">         # Connect remaining nodes</span><br><span class="line">         tail.next = list1 if list1 else list2</span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>这里其实用到了上一题的函数，也就是合并链表并排序。我们先将链表分成两半，然后递归地对每一半进行排序，最后再合并两个已排序的链表。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-0021-合并两个有序链表&quot;&gt;&lt;a href=&quot;#2-0021-合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;2.0021. 合并两个有序链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://datawhalechina.github.i</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>链表排序0806</title>
    <link href="https://zjncs.github.io/2025/08/06/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0806/"/>
    <id>https://zjncs.github.io/2025/08/06/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0806/</id>
    <published>2025-08-06T01:49:32.000Z</published>
    <updated>2025-08-06T01:51:12.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-链表排序简介"><a href="#1-链表排序简介" class="headerlink" title="1. 链表排序简介"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.05-Linked-List-Sort?id=_1-%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F%E7%AE%80%E4%BB%8B">1. 链表排序简介</a></h2><p><strong>在数组排序中，常见的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、桶排序、基数排序等。</strong></p><p>**而对于链表排序而言，因为链表不支持随机访问，访问链表后面的节点只能依靠 **<code>next</code> 指针从头部顺序遍历，所以相对于数组排序问题来说，链表排序问题会更加复杂一点。</p><p><strong>下面先来总结一下适合链表排序与不适合链表排序的算法：</strong></p><ul><li>**适合链表的排序算法：**<strong>冒泡排序</strong>、<strong>选择排序</strong>、<strong>插入排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>计数排序</strong>、<strong>桶排序</strong>、<strong>基数排序</strong>。</li><li>**不适合链表的排序算法：**<strong>希尔排序</strong>。</li><li>**可以用于链表排序但不建议使用的排序算法：**<strong>堆排序</strong>。</li></ul><blockquote><p><strong>希尔排序为什么不适合链表排序？</strong></p></blockquote><p><strong>希尔排序</strong>：希尔排序中经常涉及到对序列中第 <code>i + gap</code> 的元素进行操作，其中 <code>gap</code> 是希尔排序中当前的步长。而链表不支持随机访问的特性，导致这种操作不适合链表，因而希尔排序算法不适合进行链表排序。</p><blockquote><p><strong>为什么不建议使用堆排序？</strong></p></blockquote><p><strong>堆排序</strong>：堆排序所使用的最大堆 &#x2F; 最小堆结构本质上是一棵完全二叉树。而完全二叉树适合采用顺序存储结构（数组）。因为数组存储的完全二叉树可以很方便的通过下标序号来确定父亲节点和孩子节点，并且可以极大限度的节省存储空间。</p><p><strong>而链表用在存储完全二叉树的时候，因为不支持随机访问的特性，导致其寻找子节点和父亲节点会比较耗时，如果增加指向父亲节点的变量，又会浪费大量存储空间。所以堆排序算法不适合进行链表排序。</strong></p><p><strong>如果一定要对链表进行堆排序，则可以使用额外的数组空间表示堆结构。然后将链表中各个节点的值依次添加入堆结构中，对数组进行堆排序。排序后，再按照堆中元素顺序，依次建立链表节点，构建新的链表并返回新链表头节点。</strong></p><h2 id="1-0147-对链表进行插入排序"><a href="#1-0147-对链表进行插入排序" class="headerlink" title="1.0147. 对链表进行插入排序"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_1-0147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">1.</a><a href="https://leetcode.cn/problems/insertion-sort-list/">0147. 对链表进行插入排序</a></h2><p>**给定单个链表的头 **<code>head</code> ，使用 <strong>插入排序</strong> 对链表进行排序，并返回 <em>排序后链表的头</em> 。</p><p><strong>插入排序</strong> 算法的步骤:</p><ol><li><strong>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</strong></li><li><strong>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</strong></li><li><strong>重复直到所有输入数据插入完为止。</strong></li></ol><p><strong>下面是插入排序算法的一个图形示例。部分排序的列表(黑色)最初只包含列表中的第一个元素。每次迭代时，从输入数据中删除一个元素(红色)，并就地插入已排序的列表中。</strong></p><p><strong>对链表进行插入排序。</strong></p><p><img src="https://pic.leetcode.cn/1724130387-qxfMwx-Insertion-sort-example-300px.gif" alt="img"></p><hr><p><strong>示例 1：</strong></p><p><img src="https://pic.leetcode.cn/1724130414-QbPAjl-image.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [4,2,1,3]</span><br><span class="line"> 输出: [1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://pic.leetcode.cn/1724130432-zoOvdI-image.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [-1,5,3,4,0]</span><br><span class="line"> 输出: [-1,0,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> </span><br><span class="line"> class Solution:</span><br><span class="line">     def insertionSortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line">         </span><br><span class="line">         # 创建一个哨兵节点（虚拟头节点）</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         dummy.next = head</span><br><span class="line">         </span><br><span class="line">         # 已排序部分的最后一个节点</span><br><span class="line">         last_sorted = head</span><br><span class="line">         # 当前要插入的节点</span><br><span class="line">         current = head.next</span><br><span class="line">         </span><br><span class="line">         while current:</span><br><span class="line">             if current.val &gt;= last_sorted.val:</span><br><span class="line">                 # 当前节点已经在正确位置，无需移动</span><br><span class="line">                 last_sorted = last_sorted.next</span><br><span class="line">             else:</span><br><span class="line">                 # 从头开始找插入位置</span><br><span class="line">                 prev = dummy</span><br><span class="line">                 while prev.next and prev.next.val &lt; current.val:</span><br><span class="line">                     prev = prev.next</span><br><span class="line">                 </span><br><span class="line">                 # 插入 current 节点到 prev 和 prev.next 之间</span><br><span class="line">                 last_sorted.next = current.next  # 断开 current</span><br><span class="line">                 current.next = prev.next</span><br><span class="line">                 prev.next = current</span><br><span class="line"> </span><br><span class="line">             # 移动 current 指针</span><br><span class="line">             current = last_sorted.next</span><br><span class="line">         </span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-链表排序简介&quot;&gt;&lt;a href=&quot;#1-链表排序简介&quot; class=&quot;headerlink&quot; title=&quot;1. 链表排序简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://datawhalechina.github.io/leetcode-notes/#/ch</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>链表0805</title>
    <link href="https://zjncs.github.io/2025/08/05/%E9%93%BE%E8%A1%A80805/"/>
    <id>https://zjncs.github.io/2025/08/05/%E9%93%BE%E8%A1%A80805/</id>
    <published>2025-08-05T08:42:50.000Z</published>
    <updated>2025-08-06T01:50:50.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0203-移除链表元素"><a href="#0203-移除链表元素" class="headerlink" title="0203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">0203. 移除链表元素</a></h2><p>**给你一个链表的头节点 **<code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line"> 输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [], val = 1</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [7,7,7,7], val = 7</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p>** **<strong>提示：</strong></p><ul><li>**列表中的节点数目在范围 **<code>[0, 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def removeElements(self, head: Optional[ListNode], val: int) -&gt; Optional[ListNode]:</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         dummy.next = head</span><br><span class="line">         current = dummy</span><br><span class="line">         #创建了虚拟头结点</span><br><span class="line">         while current and current.next:</span><br><span class="line">             if current.next.val==val:</span><br><span class="line">                 current.next=current.next.next</span><br><span class="line">             else : current=current.next</span><br><span class="line">         return dummy.next</span><br><span class="line">         </span><br></pre></td></tr></table></figure><p><strong>这里创建了虚拟头结点，目的就是为了方便删除头结点的情况，便于统一管理所有结点</strong></p><h2 id="0328-奇偶链表"><a href="#0328-奇偶链表" class="headerlink" title="0328. 奇偶链表"></a><a href="https://leetcode.cn/problems/odd-even-linked-list/">0328. 奇偶链表</a></h2><p>**给定单链表的头节点 **<code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别分组，保持它们原有的相对顺序，然后把偶数索引节点分组连接到奇数索引节点分组之后，返回重新排序的链表。</p><p><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推。</p><p><strong>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。</strong></p><p>**你必须在 **<code>O(1)</code> 的额外空间复杂度和 <code>O(n)</code> 的时间复杂度下解决这个问题。</p><hr><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [1,2,3,4,5]</span><br><span class="line"> 输出: [1,3,5,2,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [2,1,3,5,6,4,7]</span><br><span class="line"> 输出: [2,3,6,7,1,5,4]</span><br></pre></td></tr></table></figure><hr><p><strong>提示:</strong></p><ul><li><code>n == </code> 链表中的节点数</li><li><code>0 &lt;= n &lt;= 104</code></li><li><code>-106 &lt;= Node.val &lt;= 106</code></li></ul><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def oddEvenList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line">         odd = head</span><br><span class="line">         even = head.next</span><br><span class="line">         even_head = even  # 保存偶数链的起点</span><br><span class="line">         while even and even.next:</span><br><span class="line">             odd.next = even.next</span><br><span class="line">             odd = odd.next</span><br><span class="line"> </span><br><span class="line">             even.next = odd.next</span><br><span class="line">             even = even.next</span><br><span class="line"> </span><br><span class="line">         # 连接奇数链尾部到偶数链头</span><br><span class="line">         odd.next = even_head</span><br><span class="line">         return head</span><br></pre></td></tr></table></figure><p><strong>很容易想到快慢指针，但是要先保存偶数链起点的引用，不然就容易丢失</strong></p><h2 id="0234-回文链表"><a href="#0234-回文链表" class="headerlink" title="0234. 回文链表"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/">0234. 回文链表</a></h2><p>**给你一个单链表的头节点 **<code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2,2,1]</span><br><span class="line"> 输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2]</span><br><span class="line"> 输出：false</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def isPalindrome(self, head: Optional[ListNode]) -&gt; bool:</span><br><span class="line">         # 特殊情况：空链表或只有一个节点，必然是回文</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return True</span><br><span class="line">         dummy=ListNode(0)</span><br><span class="line">         dummy.next=head</span><br><span class="line">         left,right=dummy,dummy</span><br><span class="line">         while right and right.next:</span><br><span class="line">             right=right.next.next</span><br><span class="line">             left=left.next</span><br><span class="line">         current=head</span><br><span class="line">         second_half_list = []</span><br><span class="line">         while left.next:</span><br><span class="line">             </span><br><span class="line">             second_half_list.append(left.next.val)</span><br><span class="line">             left = left.next</span><br><span class="line">         while second_half_list:</span><br><span class="line">             if current.val != second_half_list.pop():</span><br><span class="line">                 return False</span><br><span class="line">             current = current.next</span><br><span class="line"> </span><br><span class="line">         return True</span><br><span class="line">                      </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>其实可以直接将整个链表转换成列表，然后用双指针判断是否为回文。</strong></p><p><strong>也可以构造辅助函数，实现原地翻转，这样的空间复杂度是 O(1)。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> # 反转链表的辅助函数</span><br><span class="line">     def reverse(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         prev = None</span><br><span class="line">         curr = head</span><br><span class="line">         while curr:</span><br><span class="line">             next_temp = curr.next</span><br><span class="line">             curr.next = prev</span><br><span class="line">             prev = curr</span><br><span class="line">             curr = next_temp</span><br><span class="line">         return prev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0203-移除链表元素&quot;&gt;&lt;a href=&quot;#0203-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;0203. 移除链表元素&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-linked-</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>Blog搭建指南</title>
    <link href="https://zjncs.github.io/2025/08/05/Blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://zjncs.github.io/2025/08/05/Blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</id>
    <published>2025-08-05T03:28:22.000Z</published>
    <updated>2025-08-05T05:03:01.395Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这篇文章将手把手记录我如何搭建自己的技术博客，涵盖 Hexo 博客初始化、主题美化、内容管理到自动部署的完整流程，希望对也想打造自己博客的你有所帮助。</strong></p><hr><h2 id="一、Hexo-初始化与基础配置"><a href="#一、Hexo-初始化与基础配置" class="headerlink" title="一、Hexo 初始化与基础配置"></a>一、Hexo 初始化与基础配置</h2><p><strong>Hexo 是一款基于 Node.js 的静态博客框架，轻量、快速，非常适合开发者记录技术文章。</strong></p><h3 id="初始化项目结构"><a href="#初始化项目结构" class="headerlink" title="初始化项目结构"></a>初始化项目结构</h3><p><strong>确保本地安装了 Node.js 和 Git，然后全局安装 Hexo：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> npm install -g hexo-cli</span><br><span class="line"> hexo init my-blog</span><br><span class="line"> cd my-blog</span><br><span class="line"> npm install</span><br></pre></td></tr></table></figure><p><strong>项目初始化完成后，会看到几个关键目录和文件，比如：</strong></p><ul><li><code>source/</code>：文章目录</li><li><code>themes/</code>：主题目录</li><li><code>_config.yml</code>：博客全局配置文件</li></ul><h3 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h3><p>**打开根目录下的 **<code>_config.yml</code>，修改以下内容来设置站点信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Johnny-Zhao&#x27;s TechBlog</span><br><span class="line"> subtitle: KEEP FIGHTING</span><br><span class="line"> author: Johnny-Zhao</span><br><span class="line"> language: zh-CN</span><br><span class="line"> url: https://zjncs.github.io</span><br></pre></td></tr></table></figure><p><strong>接着，安装依赖（推荐使用 yarn）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> yarn install</span><br></pre></td></tr></table></figure><p><strong>这样 Hexo 的核心环境就搭好了。</strong></p><hr><h2 id="二、美化博客：Butterfly-主题配置"><a href="#二、美化博客：Butterfly-主题配置" class="headerlink" title="二、美化博客：Butterfly 主题配置"></a>二、美化博客：Butterfly 主题配置</h2><p><strong>一个好看的博客主题，不光提升观感，还能激发写作动力。我选择的是 Butterfly —— 颜值高、功能全、社区活跃。</strong></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>**从 **<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 仓库</a> 克隆到 <code>themes</code> 目录，并在 <code>_config.yml</code> 中指定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p>**主题的详细配置写在 **<code>_config.butterfly.yml</code> 中，这里记录几个关键改动：</p><ul><li><strong>夜间模式</strong>：支持自动&#x2F;手动切换</li><li><strong>首页背景图 + 动态头像</strong>：加点动画效果，看着更灵动</li><li><strong>副标题打字机效果</strong>：配上「愿你历尽千帆，归来仍是少年」等短句</li><li><strong>侧边栏组件</strong>：作者简介、公告栏、分类、标签、归档一应俱全</li><li><strong>评论系统</strong>：集成 Giscus，评论数据保存在 GitHub 仓库中</li><li><strong>代码块美化</strong>：mac 风格 + 一键复制 + 语言标识</li><li><strong>数学公式支持</strong>：开启 KaTeX，写公式不再痛苦</li></ul><h3 id="Hexo-Pro：桌面端可视化管理利器"><a href="#Hexo-Pro：桌面端可视化管理利器" class="headerlink" title="Hexo Pro：桌面端可视化管理利器"></a>Hexo Pro：桌面端可视化管理利器</h3><p>**除了传统命令行操作，我还使用了 **<a href="https://github.com/jiangtj/hexo-pro">Hexo Pro</a> —— 一款基于 Electron 的桌面客户端。它支持：</p><ul><li><strong>图形化管理文章、分类、标签；</strong></li><li><strong>一键新建、编辑、发布文章；</strong></li><li><strong>直接预览博客样式；</strong></li><li><strong>支持 Hexo 插件管理与主题切换；</strong></li><li><strong>提供 Windows&#x2F;macOS 版本，开箱即用。</strong></li></ul><p><strong>这对不熟悉命令行或希望更高效率地管理博客内容的用户非常友好，特别适合日常频繁写作的技术人。</strong></p><hr><h3 id="Qexo：极致轻量的后端服务推荐"><a href="#Qexo：极致轻量的后端服务推荐" class="headerlink" title="Qexo：极致轻量的后端服务推荐"></a>Qexo：极致轻量的后端服务推荐</h3><p>**如果你想更进一步，让博客拥有完整的后台管理系统，不妨试试 **<a href="https://github.com/anyesu/qexo">Qexo</a>。</p><p><strong>Qexo 是一个为 Hexo 博客设计的轻量级后台，它的特点包括：</strong></p><ul><li><strong>支持在线创建&#x2F;修改文章；</strong></li><li><strong>自带图床功能，方便插入图片；</strong></li><li><strong>可搭配 Cloudflare Pages、Vercel、GitHub Pages 等平台部署；</strong></li><li><strong>极简风格 UI，操作直观、性能出色；</strong></li><li><strong>支持 GitHub&#x2F;Gitee 登录；</strong></li><li><strong>与 Hexo 博客仓库无缝连接，自动提交 PR 实现文章管理。</strong></li></ul><p><strong>这对于想在手机或浏览器上随时写作的朋友来说，非常实用。</strong></p><hr><blockquote><p>**💡 **<strong>个人建议</strong>：Hexo Pro 更适合桌面端写作和内容管理，Qexo 则提供了一个轻量在线 CMS 管理界面，两者可以结合使用，让你的博客写作体验更上一层楼。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这篇文章将手把手记录我如何搭建自己的技术博客，涵盖 Hexo 博客初始化、主题美化、内容管理到自动部署的完整流程，希望对也想打造自己博客的你有所帮助。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、Hexo-初始化与基础配置&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="杂类" scheme="https://zjncs.github.io/categories/%E6%9D%82%E7%B1%BB/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
    <category term="环境配置" scheme="https://zjncs.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
