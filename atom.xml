<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Johnny-Zhao&#39;s TechBlog</title>
  
  <subtitle>KEEP FIGHTING</subtitle>
  <link href="https://zjncs.github.io/atom.xml" rel="self"/>
  
  <link href="https://zjncs.github.io/"/>
  <updated>2025-08-13T02:08:24.536Z</updated>
  <id>https://zjncs.github.io/</id>
  
  <author>
    <name>Johnny-Zhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EoH文章阅读</title>
    <link href="https://zjncs.github.io/2025/08/13/EoH%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/"/>
    <id>https://zjncs.github.io/2025/08/13/EoH%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB/</id>
    <published>2025-08-13T02:07:21.000Z</published>
    <updated>2025-08-13T02:08:24.536Z</updated>
    
    <content type="html"><![CDATA[<p>源码及文章：<a href="https://github.com/FeiLiu36/EoH/blob/main/README_CN.md">EoH&#x2F;README_CN.md at main · FeiLiu36&#x2F;EoH</a></p><p><strong>Evolution of Heuristic 启发式进化：</strong></p><p><strong>Evolutionary Computation 进化计算：</strong></p><p><strong>Automatic Heuristic Design 自动启发式设计</strong></p><p><strong>EoH 将自然语言中的启发式思维转化为可执行代码，通过优化搜索框架对思维与代码的持续演化，显著提升了高性能启发式算法的生成效率。</strong></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250811094659600.png" alt="image-20250811094659600"></p><p><strong>创新点</strong>：</p><p><strong>双重演进</strong>：EoH 利用 LLM 不仅演进代码，更重要的是它还演进“思想”。LLM 首先根据现有的优秀启发式（包含思想和代码），生成一个改进的或全新的“思想” 。</p><p><strong>思想指导代码</strong>：随后，LLM 再将这个新生成的“思想”作为指导，翻译成具体的“代码” 。</p><p><strong>提示策略 (Prompt Strategies)</strong>：整个演进过程并非盲目进行，而是由一系列精心设计的提示策略来引导，分为两大类：探索（Exploration: E1, E2）和修改（Modification: M1, M2, M3），以确保生成更多样化和更有效的启发式算法 。</p><p><strong>通过构建 thought 来表征启发式算法的核心逻辑。随后借助语言模型生成代码实现。随后协同进化逐步优化思想域代码</strong></p><p><strong>三大贡献：</strong></p><p><strong>框架上提出 EoH</strong></p><p><strong>设计了高效的 prompt</strong></p><p><strong>通过组合优化问题对 EoH 进行了全面评估</strong></p><p><strong>与本研究最相关的是 FunSearch 框架：</strong></p><p>**FunSearch 是由 Google DeepMind 开发的一种创新的方法，其名称是 “在函数空间中搜索”（Searching in the **<strong>Fun</strong>ction Space）的缩写。它旨在利用大型语言模型（LLM）来解决数学和计算机科学领域的难题，甚至做出全新的科学发现。</p><p><strong>FunSearch 的核心思想是将一个预训练的大型语言模型（LLM）的创造力与一个自动评估系统结合起来。它并不直接让 LLM 给出问题的最终答案，而是让 LLM 生成解决问题的“程序”或“函数”。这种方法的巧妙之处在于：</strong></p><ul><li><strong>规避“幻觉”</strong>：LLM 常常会“一本正经地胡说八道”（产生幻觉）。但 FunSearch 生成的是代码，这些代码可以通过一个自动评估器（Evaluator）来运行和打分，从而有效过滤掉所有不正确或无效的想法。</li><li><strong>输出可解释的知识</strong>：FunSearch 最终产出的是一个能够解决问题的程序。人类科学家可以阅读和理解这个程序，从而洞察问题是如何被解决的，而不仅仅是知道答案是什么。这有助于激发新的研究思路。</li></ul><p><strong>FunSearch 的工作方式可以看作是一种由 LLM 驱动的“演化算法”或“遗传编程”。其基本流程如下：</strong></p><ol><li><strong>定义问题</strong>：用户首先需要用代码来描述一个问题。这通常包括一个用于评估解决方案好坏的 <code>evaluate</code> 函数，以及一个非常简单的初始程序作为“种子”。</li><li><strong>演化循环</strong>：<ul><li><strong>选择与提示</strong>：系统从一个“程序数据库”（Program Database）中挑选出一些当前最高效的程序。</li><li><strong>LLM 生成新代码</strong>：将这些高效程序作为“范例”输入给 LLM（一个专门训练用于编码的 LLM，如 Codey），并提示它在此基础上进行创新，生成新的、可能更好的函数代码。</li><li><strong>评估与筛选</strong>：新生成的代码会被自动评估器运行和打分。</li><li><strong>更新数据库</strong>：如果新程序的表现优于现有的程序，它就会被添加到程序数据库中，用于下一轮的演化。</li></ul></li><li><strong>持续迭代</strong>：这个“生成-评估-筛选”的循环会不断重复，推动程序从一个简单的“种子”逐步“演化”成一个非常高效的解决方案。</li></ol><p><strong>FunSearch 已经在一些长期存在的数学开放性问题上取得了突破性的成果：</strong></p><ul><li><strong>上限集问题（Cap Set Problem）</strong>：这是一个困扰了数学家几十年的组合数学难题。FunSearch 发现了比人类已知方法更大的上限集构造方案，这是首次由 LLM 在这类具有挑战性的科学问题上做出新发现。</li><li><strong>在线装箱问题（Bin Packing Problem）</strong>：这是一个经典的组合优化问题，旨在找到最有效的方式将不同大小的物品装入有限数量的箱子。FunSearch 发现了一种比人类常用启发式算法更优的策略。</li></ul><p><strong>EoH 旨在通过进化思想和代码，模拟人类专家进行启发式开发的过程，从而实现高效的自动启发式设计。</strong></p><p><strong>1.每次实验，系统允许大语言模型以自然语言形式生成启发式算法与对应的代码实现。</strong></p><p><strong>2.采用五种提示策略来指导 LLM 对现有思想和代码进行推理</strong></p><p><strong>3.进化出一组候选启发式算法，它利用大语言模型在遗传算子（如交叉变异）种生成新的启发式算法，并通过选择机制引导搜索过程并评估</strong></p><p><strong>与大多数进化算法中个体是优化问题的候选解不同，我们认为“思想”的进化应该是一个重要的研究方向</strong></p><p><strong>进化框架：</strong></p><p><strong>第 0 步：初始化 (Initialization)</strong></p><ul><li><strong>通过特定的“初始化提示”（Initialization prompt）来请求大型语言模型（LLM），生成一个包含 N 个初始启发式算法的种群 P。</strong></li><li><strong>每个生成的启发式算法都会被评估其性能，并被赋予一个适应度值（fitness value）。</strong></li></ul><p><strong>第 1 步：生成新的启发式算法 (Generation of Heuristics)</strong></p><ul><li><strong>只要未达到停止条件（例如，预设的代数），系统就会同时使用五种不同的“演化提示策略”（Evolution prompt strategies）来生成总共 5N 个新的启发式算法。</strong></li><li><strong>对于这五种策略中的每一种，都会重复执行 N 次以下子流程：</strong><ul><li><strong>第 1.1 步：选择父辈</strong>：从当前种群中选择一个或多个父辈启发式算法来构建提示。父辈的选择是基于其适应度排名，排名越高的个体被选中的概率越低（公式为 pi∝1&#x2F;(ri+N)，其中 ri 是排名），这鼓励了对种群中更多样化个体的探索。</li><li><strong>第 1.2 步：生成新个体</strong>：请求 LLM 根据提示生成一个新的启发式算法，包括其“思想”（自然语言描述）和对应的“代码”实现。</li><li><strong>第 1.3 步：评估</strong>：在指定的评估实例集上运行新生成的启发式算法，以确定其适应度值。</li><li><strong>第 1.4 步：加入种群</strong>：如果新生成的启发式算法及其代码是可行的（例如，没有语法错误），就将其添加到当前种群中。</li></ul></li></ul><p><strong>第 2 步：种群管理 (Population Management)</strong></p><ul><li><strong>在生成了多达 5N 个新个体后，将它们与原有的 N 个个体合并。</strong></li><li><strong>从这个扩大的种群中，选择出适应度值最高的 N 个启发式算法，形成下一代的种群。</strong></li><li><strong>之后，返回第 1 步，开始新一轮的演化。</strong></li></ul><h4 id="步骤-0-初始化-Initialization"><a href="#步骤-0-初始化-Initialization" class="headerlink" title="步骤 0: 初始化 (Initialization)"></a><strong>步骤 0: 初始化 (Initialization)</strong></h4><ul><li><strong>目标</strong>：创建初始种群。</li><li><strong>过程</strong>：框架首先会创建一个包含 <code>N</code> 个启发式算法的初始种群 <code>P</code> 。这些初始算法并非由人类专家提供，而是通过向 LLM 发送“初始化提示”（Initialization prompt）自动生成的，从而减少了对专家知识的依赖 。这个过程会重复<br><code>N</code> 次，以获得 <code>N</code> 个初始启发式算法 。</li></ul><h4 id="步骤-1-新启发式算法的生成-Generation-of-Heuristics"><a href="#步骤-1-新启发式算法的生成-Generation-of-Heuristics" class="headerlink" title="步骤 1: 新启发式算法的生成 (Generation of Heuristics)"></a><strong>步骤 1: 新启发式算法的生成 (Generation of Heuristics)</strong></h4><ul><li><strong>目标</strong>：通过进化操作产生新的、可能更优的启发式算法。</li><li><strong>过程</strong>：只要未达到停止条件（例如，预设的代数），框架就会利用五种不同的“进化提示策略”（Evolution prompt strategies）来生成新的启发式算法 。这些策略分为两大类 ：<ul><li><strong>探索 (Exploration)</strong>：如 E1 和 E2 策略，旨在通过类似交叉的操作探索启发式算法空间，产生与父代差异较大的新想法 。</li><li><strong>修改 (Modification)</strong>：如 M1, M2, M3 策略，旨在通过微调、修改参数或简化冗余部分来优化某个父代启发式算法 。</li></ul></li><li>**在每一代中，这五种策略会同时被使用，每个策略均被调用 **<br><code>N</code> 次，从而生成最多 <code>5N</code> 个新的启发式算法 。</li><li><strong>生成每一个新算法的具体流程如下：</strong><ol><li><strong>选择父代 (Parent Selection)</strong>：从当前种群中选择一个或多个父代启发式算法 。选择过程可以基于适应度排名，适应度高的个体有更高的被选中概率 。</li><li><strong>生成新个体 (Generation)</strong>：将选定的父代（包括其“思想”和“代码”）和相应的策略指令构建成一个提示，请求 LLM 生成一个新的启发式算法（包括新的“思想”和“代码”） 。</li><li><strong>评估 (Evaluation)</strong>：在新生成代码可行的情况下，将其在一组评估实例上运行，以计算出其适应度值 。</li><li><strong>加入种群 (Addition)</strong>：将这个经过评估且可行的新启发式算法添加到当前种群中 。</li></ol></li></ul><h4 id="步骤-2-种群管理-Population-Management"><a href="#步骤-2-种群管理-Population-Management" class="headerlink" title="步骤 2: 种群管理 (Population Management)"></a><strong>步骤 2: 种群管理 (Population Management)</strong></h4><ul><li><strong>目标</strong>：为下一代选择优胜者。</li><li><strong>过程</strong>：在 <code>5N</code> 个新个体生成并加入后，种群规模会临时扩大。此时，框架会从扩大的种群中选择适应度最高的 <code>N</code> 个启发式算法，形成下一代的种群 。</li><li><strong>之后，算法返回****步骤 1</strong>，开始新一代的进化 。<br><strong>Heuristic Representation：</strong></li></ul><ol><li><strong>自然语言描述 (Natural Language Description)</strong><ul><li><strong>这部分由几句自然语言组成，被称作“思想”（thought） 。</strong></li><li><strong>它由大型语言模型（LLM）创建，用于呈现启发式算法的高级思想和核心逻辑 。</strong></li></ul></li><li><strong>代码块 (Code Block)</strong><ul><li><strong>这是对上述“思想”的具体编程实现 。</strong></li><li><strong>代码必须遵循预定义的格式，以便 EoH 框架能够自动识别和无缝集成 。在实验中，这通常实现为一个 Python 函数 。</strong></li><li><strong>为了格式化代码块，需要明确指定三个基本组成部分：函数名称、输入变量和输出变量 。</strong></li></ul></li><li><strong>适应度值 (Fitness Value)</strong><ul><li><strong>每个启发式算法都会被赋予一个适应度值 。</strong></li><li><strong>这个值是通过在指定问题的一组实例上运行该启发式算法，并评估其性能而获得的 。</strong></li></ul></li></ol><h1 id="提示词"><a href="#提示词" class="headerlink" title="提示词"></a>提示词</h1><p><strong>初始化提示在我们的实验中，我们使用语言模型 （LLMs）生成所有初始启发式算法，无需依赖专家知识。</strong></p><h3 id="探索策略-Exploration-Strategies"><a href="#探索策略-Exploration-Strategies" class="headerlink" title="探索策略 (Exploration Strategies)"></a>探索策略 (Exploration Strategies)</h3><p><strong>探索策略专注于通过对父代启发式算法进行类似交叉的操作来探索更广阔的算法空间 。</strong></p><ul><li><strong>E1: 差异化探索</strong><br><strong>目标</strong>: 生成与父代尽可能不同的新启发式算法 。<br><strong>过程</strong>: 首先，从当前种群中选择 <code>p</code> 个父代启发式算法 。然后，提示大型语言模型（LLM）设计一个在思想上与这些父代尽可能不同的新算法，以探索全新的思路 。</li><li><strong>E2: 共同思想探索</strong><br><strong>目标</strong>: 探索与父代共享相同核心思想但实现方式不同的新启发式算法 。<br><strong>过程</strong>: 首先，从当前种群中选择 <code>p</code> 个父代 。然后，指令 LLM 识别这些算法背后的共同思想 。接着，要求 LLM 在这些共同思想的基础上，通过引入新元素来设计一个尽可能与父代不同的新算法 。</li></ul><h3 id="修改策略-Modification-Strategies"><a href="#修改策略-Modification-Strategies" class="headerlink" title="修改策略 (Modification Strategies)"></a>修改策略 (Modification Strategies)</h3><p><strong>修改策略专注于通过调整、修改参数或简化来优化单个父代启发式算法 。</strong></p><ul><li><strong>M1: 性能改进</strong><br><strong>目标</strong>: 修改一个启发式算法以获得更好的性能 。<br><strong>过程</strong>: 从种群中选择一个启发式算法 。然后，提示 LLM 对其进行修改，以产生一个新的版本 。</li><li><strong>M2: 参数调整</strong><br><strong>目标</strong>: 修改一个已选启发式算法的参数 。<br><strong>过程</strong>: 从种群中选择一个启发式算法 。然后，提示 LLM 尝试在该算法中调整参数，而不是设计一个全新的算法 。</li><li><strong>M3: 简化与去冗余</strong><br><strong>目标</strong>: 通过移除冗余组件来简化启发式算法 。<br><strong>过程</strong>: 从种群中选择一个启发式算法 。然后，提示 LLM 分析并识别其主要组成部分，并判断是否存在冗余 。最后，要求 LLM 根据其分析结果来简化该算法的代码实现 。</li></ul><p><strong>选择机制：</strong></p><h3 id="排序与排名"><a href="#排序与排名" class="headerlink" title="排序与排名"></a>排序与排名</h3><ul><li><strong>把种群中的所有启发式算法按****适应度</strong>从好到坏排序。</li><li><strong>排名 <strong>r_i</strong> 是启发式算法 i 的位置（最好的是 1，最差是 N）。</strong></li></ul><p><strong>选择的概率公式：<strong>p_i</strong>∝1&#x2F;(<strong>r_i</strong>+N)</strong></p><p><strong>概率与排名与 N 的和成反比</strong></p><p><strong>也就是排名越好，概率越大</strong></p><p><strong>排名越差，值越小，但永远不会是零（所以最差的启发式也有机会被选中）。</strong></p><p><strong>加上 N 可以让概率差距变小，保证****探索性</strong>，防止过早陷入局部最优。</p><h1 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h1><p><strong>在线装箱问题：</strong></p><p>**这个问题的目标是将一系列不同大小的物品，放入尽可能少的、具有固定容量 **</p><p><code>C</code> 的箱子中 。实验重点关注的是“在线场景”，即物品是依次到达的，每当一个物品到达时，必须立即决定将其放入哪个箱子，而不能等待后续物品的信息 。</p><p><strong>评估实例</strong>: 在启发式算法的进化过程中，其性能是在五个大小为 5k（即 5000 个物品）、容量为 100 的 Weibull 实例上进行评估的 。</p><p><strong>Weibull 实例是指物品大小遵循 Weibull 分布的装箱问题实例，这种分布常用于模拟实际应用中的物品大小。</strong></p><p><strong>适应度计算</strong>: 一个启发式算法的适应度值被设定为在这五个实例上 lb&#x2F;n 的平均值 。</p><ul><li><strong>其中，</strong> lb ** 代表理论上最优解（即最少箱子数）的下限 。比如直接总容量除以单个容量**</li><li><strong>n 是被评估的启发式算法完成所有物品装箱后，实际使用的箱子总数 。</strong><br><strong>这个比率越高，说明算法使用的箱子数越接近理论最优值，性能也就越好。</strong></li></ul><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813091735990.png" alt="image-20250813091735990"></p><p><strong>比较方法即 人工 +funsearch</strong></p><p><strong>tsp</strong></p><h3 id="目标-Objective"><a href="#目标-Objective" class="headerlink" title="目标 (Objective)"></a>目标 (Objective)</h3><p><strong>旅行商问题（TSP）的目标是找到一条最短的路线，这条路线需要访问所有给定的地点各一次，并最终返回到出发点 。它是一个被广泛研究的组合优化问题，也是一个常用的启发式算法测试平台 。</strong></p><h3 id="评估设置-Evaluation-Setup"><a href="#评估设置-Evaluation-Setup" class="headerlink" title="评估设置 (Evaluation Setup)"></a>评估设置 (Evaluation Setup)</h3><p><strong>评估实例</strong>: 启发式算法的进化（训练）过程是在一组 64 个 TSP100（即 100 个地点）的实例上进行的 。这些实例中的地点位置是从一个 [0, 1]² 的二维空间中随机抽样生成的 。</p><p><strong>也就是六十四个场景。边长为 1 的正方形区域，100 个地点的位置（即 X, Y 坐标）都是在这个 1x1 的正方形地图上****随机生成</strong>的</p><p><strong>适应度计算</strong>: 一个启发式算法的适应度值，是根据其解法与最优解之间的“平均差距”（average gap）来确定的 。这个用于计算差距的最优解是由一个名为“Concorde”的精确求解器生成的 。</p><p><strong>最优解 (Optimal Solution)</strong>: 对于每一个 TSP 问题，理论上都存在一个唯一的最短路径。研究人员使用一个叫做 <strong>Concorde</strong> 的顶尖求解器，它非常强大，可以计算出这 100 个地点问题的精确最优解</p><p><strong>差距 (Gap)</strong>: 当一个待评估的启发式算法对某个问题给出一个解（一条路径）后，研究人员会计算这个解的长度与“标准答案”的长度之间的百分比差异。这个差异就是“差距（Gap）”。例如，如果标准答案是 100 公里，算法算出来是 102 公里，那么差距就是 2%。</p><p><strong>平均差距 (Average Gap)</strong>: 算法会在全部 64 个实例上运行，得到 64 个“差距”值。最后，计算这 64 个值的<strong>平均数</strong>。</p><p><strong>适应度值 (Fitness Value)</strong>: 这个最终的<strong>平均差距</strong>就被用作该算法的适应度值。这个值越小，说明算法的解越接近最优解，性能就越好。</p><p><strong>比较方法是最近插入法和最远插入法，加上 ORtools</strong></p><p><strong>AI 方面</strong><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813092505786.png" alt="image-20250813092505786"></p><p><strong>实验细节</strong></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813092653598.png" alt="image-20250813092653598"></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813093043080.png" alt="image-20250813093043080"></p><p><strong>感觉就是人类定了大方向与框架，然后 llm 负责实现与迭代</strong></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813090211212.png" alt="image-20250813090211212"></p><p><strong>结果：</strong></p><p><strong>X 轴</strong> 代表“进化代数”（Number of generations），从第 1 代到第 20 代。</p><p><strong>Y 轴</strong> 代表“性能”（Performance），这个值越高，说明算法的效果越好。</p><p><strong>红色的折线</strong> 显示了在每一代中发现的最佳启发式算法的性能。您可以看到，性能从最初的 0.9620，经过 20 代的持续优化，最终达到了 0.9932。</p><p><strong>折线上的每个红点都代表一个性能上的“飞跃”，即发现了一个更好的启发式算法。</strong></p><p>**旁边的标注（如 **<strong>E1, E2, M1</strong>）指明了这是由哪一种“提示策略”实现的突破。</p><p>**标注的文字（如 **<code>E2, utilization of cubic root</code>）则是对这个新算法核心思想的简要描述，也就是“思想”（Thought）。</p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813094028517.png" alt="image-20250813094028517"></p><p><strong>人类想到的，算出一个物品大小和容量，然后做差，差最大的说明放完东西后，箱子剩下的空间最小</strong></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813094351634.png" alt="image-20250813094351634"></p><p><strong>AI 想到的，</strong><code>comb1</code> 项通过 <code>(bins - max_bin)**2</code> 惩罚那些容量较大（较空）的箱子，鼓励利用已部分填充的箱子。</p><p><code>comb2</code> 和 <code>comb3</code> 项则包含了物品大小和箱子容量的二次方和三次方关系。</p><p><strong>但是物理意义不直观</strong></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813094544302.png" alt="image-20250813094544302"></p><p><strong>EoH，显式地融合了多种启发式思想：</strong></p><ol><li><strong>利用率 (<code>ulti</code>)</strong>: 衡量放入物品后箱子有多满。</li><li><strong>动态调整 (<code>adjust</code>)</strong>: 使用 <code>where</code> 条件语句，根据剩余空间和物品大小的关系，采取不同的策略，实现了“惩罚大箱子”的逻辑。</li><li><strong>混合分数 (<code>hybrid_exp</code>, <code>adjust</code>)</strong>: 将多个不同来源的启发式思想（如指数衰减、利用率、条件惩罚）组合成最终的得分。</li></ol><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813094817807.png" alt="image-20250813094817807"></p><p><strong>消融研究指的是，为了理解一个复杂模型或系统的各个组成部分的重要性，而系统性地“移除”或“简化”其中一个或多个组件，然后观察整个系统性能变化的一种实验方法。</strong></p><p><strong>根据论文 4.3 节的描述，作者进行消融研究的目的是“为了更好地理解 EoH 中主要组成部分的贡献” 。</strong></p><p><strong>具体做法是，他们创建了几个“被削弱”的 EoH 版本，并与完整的 EoH 模型进行性能比较：</strong></p><p><strong>移除了“思想”部分</strong>: 他们创建了一个名为 <code>EoC</code> (Evolution of Codes) 的版本。这个版本只进化代码，完全没有自然语言的“思想”部分，以此来验证“思想”这个组件的价值 。</p><p><strong>移除了部分“提示策略”</strong>: 他们还创建了 <code>EoH-e1</code> 和 <code>EoH-e2</code> 版本。这些版本虽然保留了“思想”，但只使用了五种提示策略中的一种或两种 。</p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813095229016.png" alt="image-20250813095229016"></p><p><img src="https://raw.githubusercontent.com/zjncs/TyporaPic/main/imaimage-20250813095444591.png" alt="image-20250813095444591"></p><h1 id="讨论"><a href="#讨论" class="headerlink" title="讨论"></a>讨论</h1><p><strong>为了证明 EoH 中“思想”（自然语言描述）和“代码”共同进化是其核心优势，研究者进行了对比实验 。</strong></p><p><strong>实验设置</strong>: 他们将完整的 EoH 与几个变体进行了比较 ：</p><p><code>C2C</code>: 只进化代码，没有“思想”部分 。</p><p><code>T2T2C</code>: 只在进化中使用“思想”表示，需要时再由 LLM 生成代码用于评估 。</p><p><code>T&amp;C2T2C</code>: 进化时同时使用“思想”和“代码”作为输入，但只让 LLM 输出新的“思想”</p><p><strong>结论</strong>: 实验结果（表 6）明确表明，只进化代码（C2C）或只进化思想（T2T2C）的效果远不如完整的 EoH 。这有力地证明了**“思想”和“代码”的共同进化对 EoH 的成功做出了重大贡献** 。</p><h4 id="不同大型语言模型的影响-Different-LLMs"><a href="#不同大型语言模型的影响-Different-LLMs" class="headerlink" title="不同大型语言模型的影响 (Different LLMs)"></a><strong>不同大型语言模型的影响 (Different LLMs)</strong></h4><p><strong>研究者测试了 EoH 在使用不同 LLM 时的性能，包括 GPT-3.5、Gemini Pro、CodeLlama 和 Deepseek 。</strong></p><ul><li><strong>结论</strong>:<ul><li><strong>EoH 在使用这些不同的 LLM 时，都能够生成性能良好的启发式算法 。</strong></li><li><strong>即使只进行 2000 次查询，其性能也优于随机查询 GPT-3.5 一万次的结果 。</strong></li><li><strong>尽管如此，实验结果也显示，使用更强大的 LLM（如 GPT-3.5 和 Gemini Pro）能带来更好的性能 。</strong></li></ul></li></ul><h4 id="利用专家启发式算法-Use-of-Expert-Heuristic"><a href="#利用专家启发式算法-Use-of-Expert-Heuristic" class="headerlink" title="利用专家启发式算法 (Use of Expert Heuristic)"></a><strong>利用专家启发式算法 (Use of Expert Heuristic)</strong></h4><p><strong>研究者探究了将一个已知的、由人类专家或其它 AI 系统设计的优秀算法（专家启发式算法）放入 EoH 的初始种群中会产生什么影响 。</strong></p><p><strong>实验设置</strong>: 他们将 FunSearch 论文中提供的优秀启发式算法放入 EoH 的初始种群，并将这个版本称为 <code>EoH expert</code> 。</p><p><strong>结论</strong>: 结果显示，<code>EoH expert</code> 的性能明显超过了原始的 EoH 和 FunSearch 。这表明，<strong>EoH 框架可以有效地继承和进化已有的专家知识，从而产生更优秀的下一代算法</strong> 。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;源码及文章：&lt;a href=&quot;https://github.com/FeiLiu36/EoH/blob/main/README_CN.md&quot;&gt;EoH&amp;#x2F;README_CN.md at main · FeiLiu36&amp;#x2F;EoH&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="llm+" scheme="https://zjncs.github.io/categories/llm/"/>
    
    
    <category term="论文" scheme="https://zjncs.github.io/tags/%E8%AE%BA%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>链表双指针0808</title>
    <link href="https://zjncs.github.io/2025/08/08/%E9%93%BE%E8%A1%A8%E5%8F%8C%E6%8C%87%E9%92%880808/"/>
    <id>https://zjncs.github.io/2025/08/08/%E9%93%BE%E8%A1%A8%E5%8F%8C%E6%8C%87%E9%92%880808/</id>
    <published>2025-08-08T07:17:53.000Z</published>
    <updated>2025-08-08T07:18:00.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="3-0019-删除链表的倒数第-N-个结点"><a href="#3-0019-删除链表的倒数第-N-个结点" class="headerlink" title="3.0019. 删除链表的倒数第 N 个结点"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.09-Exercises?id=_3-0019-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%AC-n-%E4%B8%AA%E7%BB%93%E7%82%B9">3.</a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/">0019. 删除链表的倒数第 N 个结点</a></h2><h3 id="3-1-题目大意"><a href="#3-1-题目大意" class="headerlink" title="3.1 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.09-Exercises?id=_31-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">3.1 题目大意</a></h3><p><strong>描述</strong>：给定一个链表的头节点 <code>head</code>。</p><p><strong>要求</strong>：删除链表的倒数第 <code>n</code> 个节点，并且返回链表的头节点。</p><p><strong>说明</strong>：</p><ul><li><strong>要求使用一次遍历实现。</strong></li><li>**链表中结点的数目为 **<code>sz</code>。</li></ul><p><strong>示例</strong>：</p><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024001901.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2,3,4,5], n = 2</span><br><span class="line"> 输出：[1,2,3,5]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 输入：head = [1], n = 1</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> class Solution:</span><br><span class="line">     def removeNthFromEnd(self, head: Optional[ListNode], n: int) -&gt; Optional[ListNode]:</span><br><span class="line">         slow, fast = head, head</span><br><span class="line">         </span><br><span class="line">         # fast 先走 n 步</span><br><span class="line">         for _ in range(n):</span><br><span class="line">             fast = fast.next</span><br><span class="line">         </span><br><span class="line">         # 如果 fast 走到 None，说明删除的是头节点</span><br><span class="line">         if not fast:</span><br><span class="line">             return head.next</span><br><span class="line">         </span><br><span class="line">         # 同步移动，直到 fast 到最后一个节点</span><br><span class="line">         while fast.next:</span><br><span class="line">             slow = slow.next</span><br><span class="line">             fast = fast.next</span><br><span class="line">         </span><br><span class="line">         # 删除 slow.next 节点</span><br><span class="line">         slow.next = slow.next.next</span><br><span class="line">         return head</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li><a href="https://leetcode.cn/problems/middle-of-the-linked-list/">876. 链表的中间结点 - 力扣（LeetCode）</a></li></ul><h4 id="3-4-2-题目大意"><a href="#3-4-2-题目大意" class="headerlink" title="3.4.2 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.08-Linked-List-Two-Pointers?id=_342-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">3.4.2 题目大意</a></h4><p><strong>描述</strong>：给定一个单链表的头节点 <code>head</code>。</p><p><strong>要求</strong>：返回链表的中间节点。如果有两个中间节点，则返回第二个中间节点。</p><p><strong>说明</strong>：</p><ul><li>**给定链表的结点数介于 **<code>1</code> 和 <code>100</code> 之间。</li></ul><p><strong>示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> 输入：[1,2,3,4,5]</span><br><span class="line"> 输出：此列表中的结点 3 (序列化形式：[3,4,5])</span><br><span class="line"> 解释：返回的结点值为 3 。</span><br><span class="line"> 注意，我们返回了一个 ListNode 类型的对象 ans，这样：</span><br><span class="line"> ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 输入：[1,2,3,4,5,6]</span><br><span class="line"> 输出：此列表中的结点 4 (序列化形式：[4,5,6])</span><br><span class="line"> 解释：由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> class Solution:</span><br><span class="line">     def middleNode(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         slow, fast = head, head</span><br><span class="line">         while fast and fast.next:</span><br><span class="line">             slow = slow.next</span><br><span class="line">             fast = fast.next.next</span><br><span class="line">         return slow</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;3-0019-删除链表的倒数第-N-个结点&quot;&gt;&lt;a href=&quot;#3-0019-删除链表的倒数第-N-个结点&quot; class=&quot;headerlink&quot; title=&quot;3.0019. 删除链表的倒数第 N 个结点&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://dataw</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>链表排序0807</title>
    <link href="https://zjncs.github.io/2025/08/07/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0807/"/>
    <id>https://zjncs.github.io/2025/08/07/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0807/</id>
    <published>2025-08-07T08:32:08.000Z</published>
    <updated>2025-08-07T09:05:02.307Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-0021-合并两个有序链表"><a href="#2-0021-合并两个有序链表" class="headerlink" title="2.0021. 合并两个有序链表"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_2-0021-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8">2.</a><a href="https://leetcode.cn/problems/merge-two-sorted-lists/">0021. 合并两个有序链表</a></h2><h3 id="2-1-题目大意"><a href="#2-1-题目大意" class="headerlink" title="2.1 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_21-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">2.1 题目大意</a></h3><p><strong>描述</strong>：给定两个升序链表的头节点 <code>list1</code> 和 <code>list2</code>。</p><p><strong>要求</strong>：将其合并为一个升序链表。</p><p><strong>说明</strong>：</p><ul><li><strong>两个链表的节点数目范围是 。</strong></li><li><code>list1</code> 和 <code>list2</code> 均按 <strong>非递减顺序</strong> 排列</li></ul><p><strong>示例</strong>：</p><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024002101.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> 输入：list1 = [1,2,4], list2 = [1,3,4]</span><br><span class="line"> 输出：[1,1,2,3,4,4]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> 输入：list1 = [], list2 = []</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> class ListNode:</span><br><span class="line">     def __init__(self, val=0, next=None):</span><br><span class="line">         self.val = val</span><br><span class="line">         self.next = next</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> class Solution:</span><br><span class="line">     def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         # 创建一个哑节点 dummy，它的 next 最后会指向合并后的链表头</span><br><span class="line">         dummy = ListNode(-1)</span><br><span class="line">         current = dummy</span><br><span class="line"> </span><br><span class="line">         # 遍历两个链表，哪个值小就接到 current 后面</span><br><span class="line">         while list1 and list2:</span><br><span class="line">             if list1.val &lt;= list2.val:</span><br><span class="line">                 current.next = list1</span><br><span class="line">                 list1 = list1.next</span><br><span class="line">             else:</span><br><span class="line">                 current.next = list2</span><br><span class="line">                 list2 = list2.next</span><br><span class="line">             current = current.next  # 移动 current 指针</span><br><span class="line"> </span><br><span class="line">         # 把剩余的链表接上（最多只有一个不为 None）</span><br><span class="line">         current.next = list1 if list1 else list2</span><br><span class="line"> </span><br><span class="line">         # 返回合并后的链表头</span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>**在新建链表的时候，我们可以选择用哑节点加指针的方式来简化代码逻辑。哑节点是一个不存储实际数据的节点，它的 **<code>next</code> 最终会指向合并后的链表头。</p><h2 id="3-0148-排序链表"><a href="#3-0148-排序链表" class="headerlink" title="3.0148. 排序链表"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_3-0148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8">3.</a><a href="https://leetcode.cn/problems/sort-list/">0148. 排序链表</a></h2><h3 id="3-1-题目大意"><a href="#3-1-题目大意" class="headerlink" title="3.1 题目大意"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_31-%E9%A2%98%E7%9B%AE%E5%A4%A7%E6%84%8F">3.1 题目大意</a></h3><p><strong>描述</strong>：给定链表的头节点 <code>head</code>。</p><p><strong>要求</strong>：按照升序排列并返回排序后的链表。</p><p><strong>说明</strong>：</p><ul><li><strong>链表中节点的数目在范围 内。</strong></li></ul><p><strong>示例</strong>：</p><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024014801.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [4,2,1,3]</span><br><span class="line"> 输出：[1,2,3,4]Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p><img src="https://datawhalechina.github.io/leetcode-notes/images/20201024014802.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [-1,5,3,4,0]</span><br><span class="line"> 输出：[-1,0,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>解法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> class Solution:</span><br><span class="line">     def sortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         # Base case</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line"> </span><br><span class="line">         # Step 1: Split the list into two halves</span><br><span class="line">         slow, fast = head, head.next</span><br><span class="line">         while fast and fast.next:</span><br><span class="line">             slow = slow.next</span><br><span class="line">             fast = fast.next.next</span><br><span class="line"> </span><br><span class="line">         mid = slow.next</span><br><span class="line">         slow.next = None  # Cut the list</span><br><span class="line"> </span><br><span class="line">         # Step 2: Sort each half recursively</span><br><span class="line">         left = self.sortList(head)</span><br><span class="line">         right = self.sortList(mid)</span><br><span class="line"> </span><br><span class="line">         # Step 3: Merge the sorted halves</span><br><span class="line">         return self.merge(left, right)</span><br><span class="line"> </span><br><span class="line">     def merge(self, list1: ListNode, list2: ListNode) -&gt; ListNode:</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         tail = dummy</span><br><span class="line"> </span><br><span class="line">         while list1 and list2:</span><br><span class="line">             if list1.val &lt;= list2.val:</span><br><span class="line">                 tail.next = list1</span><br><span class="line">                 list1 = list1.next</span><br><span class="line">             else:</span><br><span class="line">                 tail.next = list2</span><br><span class="line">                 list2 = list2.next</span><br><span class="line">             tail = tail.next</span><br><span class="line"> </span><br><span class="line">         # Connect remaining nodes</span><br><span class="line">         tail.next = list1 if list1 else list2</span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>这里其实用到了上一题的函数，也就是合并链表并排序。我们先将链表分成两半，然后递归地对每一半进行排序，最后再合并两个已排序的链表。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2-0021-合并两个有序链表&quot;&gt;&lt;a href=&quot;#2-0021-合并两个有序链表&quot; class=&quot;headerlink&quot; title=&quot;2.0021. 合并两个有序链表&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://datawhalechina.github.i</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>链表排序0806</title>
    <link href="https://zjncs.github.io/2025/08/06/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0806/"/>
    <id>https://zjncs.github.io/2025/08/06/%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F0806/</id>
    <published>2025-08-06T01:49:32.000Z</published>
    <updated>2025-08-06T01:51:12.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-链表排序简介"><a href="#1-链表排序简介" class="headerlink" title="1. 链表排序简介"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.05-Linked-List-Sort?id=_1-%E9%93%BE%E8%A1%A8%E6%8E%92%E5%BA%8F%E7%AE%80%E4%BB%8B">1. 链表排序简介</a></h2><p><strong>在数组排序中，常见的排序算法有：冒泡排序、选择排序、插入排序、希尔排序、归并排序、快速排序、堆排序、计数排序、桶排序、基数排序等。</strong></p><p>**而对于链表排序而言，因为链表不支持随机访问，访问链表后面的节点只能依靠 **<code>next</code> 指针从头部顺序遍历，所以相对于数组排序问题来说，链表排序问题会更加复杂一点。</p><p><strong>下面先来总结一下适合链表排序与不适合链表排序的算法：</strong></p><ul><li>**适合链表的排序算法：**<strong>冒泡排序</strong>、<strong>选择排序</strong>、<strong>插入排序</strong>、<strong>归并排序</strong>、<strong>快速排序</strong>、<strong>计数排序</strong>、<strong>桶排序</strong>、<strong>基数排序</strong>。</li><li>**不适合链表的排序算法：**<strong>希尔排序</strong>。</li><li>**可以用于链表排序但不建议使用的排序算法：**<strong>堆排序</strong>。</li></ul><blockquote><p><strong>希尔排序为什么不适合链表排序？</strong></p></blockquote><p><strong>希尔排序</strong>：希尔排序中经常涉及到对序列中第 <code>i + gap</code> 的元素进行操作，其中 <code>gap</code> 是希尔排序中当前的步长。而链表不支持随机访问的特性，导致这种操作不适合链表，因而希尔排序算法不适合进行链表排序。</p><blockquote><p><strong>为什么不建议使用堆排序？</strong></p></blockquote><p><strong>堆排序</strong>：堆排序所使用的最大堆 &#x2F; 最小堆结构本质上是一棵完全二叉树。而完全二叉树适合采用顺序存储结构（数组）。因为数组存储的完全二叉树可以很方便的通过下标序号来确定父亲节点和孩子节点，并且可以极大限度的节省存储空间。</p><p><strong>而链表用在存储完全二叉树的时候，因为不支持随机访问的特性，导致其寻找子节点和父亲节点会比较耗时，如果增加指向父亲节点的变量，又会浪费大量存储空间。所以堆排序算法不适合进行链表排序。</strong></p><p><strong>如果一定要对链表进行堆排序，则可以使用额外的数组空间表示堆结构。然后将链表中各个节点的值依次添加入堆结构中，对数组进行堆排序。排序后，再按照堆中元素顺序，依次建立链表节点，构建新的链表并返回新链表头节点。</strong></p><h2 id="1-0147-对链表进行插入排序"><a href="#1-0147-对链表进行插入排序" class="headerlink" title="1.0147. 对链表进行插入排序"></a><a href="https://datawhalechina.github.io/leetcode-notes/#/ch02/02.01/02.01.06-Exercises?id=_1-0147-%E5%AF%B9%E9%93%BE%E8%A1%A8%E8%BF%9B%E8%A1%8C%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F">1.</a><a href="https://leetcode.cn/problems/insertion-sort-list/">0147. 对链表进行插入排序</a></h2><p>**给定单个链表的头 **<code>head</code> ，使用 <strong>插入排序</strong> 对链表进行排序，并返回 <em>排序后链表的头</em> 。</p><p><strong>插入排序</strong> 算法的步骤:</p><ol><li><strong>插入排序是迭代的，每次只移动一个元素，直到所有元素可以形成一个有序的输出列表。</strong></li><li><strong>每次迭代中，插入排序只从输入数据中移除一个待排序的元素，找到它在序列中适当的位置，并将其插入。</strong></li><li><strong>重复直到所有输入数据插入完为止。</strong></li></ol><p><strong>下面是插入排序算法的一个图形示例。部分排序的列表(黑色)最初只包含列表中的第一个元素。每次迭代时，从输入数据中删除一个元素(红色)，并就地插入已排序的列表中。</strong></p><p><strong>对链表进行插入排序。</strong></p><p><img src="https://pic.leetcode.cn/1724130387-qxfMwx-Insertion-sort-example-300px.gif" alt="img"></p><hr><p><strong>示例 1：</strong></p><p><img src="https://pic.leetcode.cn/1724130414-QbPAjl-image.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [4,2,1,3]</span><br><span class="line"> 输出: [1,2,3,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://pic.leetcode.cn/1724130432-zoOvdI-image.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [-1,5,3,4,0]</span><br><span class="line"> 输出: [-1,0,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> </span><br><span class="line"> class Solution:</span><br><span class="line">     def insertionSortList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line">         </span><br><span class="line">         # 创建一个哨兵节点（虚拟头节点）</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         dummy.next = head</span><br><span class="line">         </span><br><span class="line">         # 已排序部分的最后一个节点</span><br><span class="line">         last_sorted = head</span><br><span class="line">         # 当前要插入的节点</span><br><span class="line">         current = head.next</span><br><span class="line">         </span><br><span class="line">         while current:</span><br><span class="line">             if current.val &gt;= last_sorted.val:</span><br><span class="line">                 # 当前节点已经在正确位置，无需移动</span><br><span class="line">                 last_sorted = last_sorted.next</span><br><span class="line">             else:</span><br><span class="line">                 # 从头开始找插入位置</span><br><span class="line">                 prev = dummy</span><br><span class="line">                 while prev.next and prev.next.val &lt; current.val:</span><br><span class="line">                     prev = prev.next</span><br><span class="line">                 </span><br><span class="line">                 # 插入 current 节点到 prev 和 prev.next 之间</span><br><span class="line">                 last_sorted.next = current.next  # 断开 current</span><br><span class="line">                 current.next = prev.next</span><br><span class="line">                 prev.next = current</span><br><span class="line"> </span><br><span class="line">             # 移动 current 指针</span><br><span class="line">             current = last_sorted.next</span><br><span class="line">         </span><br><span class="line">         return dummy.next</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-链表排序简介&quot;&gt;&lt;a href=&quot;#1-链表排序简介&quot; class=&quot;headerlink&quot; title=&quot;1. 链表排序简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://datawhalechina.github.io/leetcode-notes/#/ch</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>链表0805</title>
    <link href="https://zjncs.github.io/2025/08/05/%E9%93%BE%E8%A1%A80805/"/>
    <id>https://zjncs.github.io/2025/08/05/%E9%93%BE%E8%A1%A80805/</id>
    <published>2025-08-05T08:42:50.000Z</published>
    <updated>2025-08-06T01:50:50.083Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0203-移除链表元素"><a href="#0203-移除链表元素" class="headerlink" title="0203. 移除链表元素"></a><a href="https://leetcode.cn/problems/remove-linked-list-elements/">0203. 移除链表元素</a></h2><p>**给你一个链表的头节点 **<code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line"> 输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [], val = 1</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [7,7,7,7], val = 7</span><br><span class="line"> 输出：[]</span><br></pre></td></tr></table></figure><p>** **<strong>提示：</strong></p><ul><li>**列表中的节点数目在范围 **<code>[0, 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def removeElements(self, head: Optional[ListNode], val: int) -&gt; Optional[ListNode]:</span><br><span class="line">         dummy = ListNode(0)</span><br><span class="line">         dummy.next = head</span><br><span class="line">         current = dummy</span><br><span class="line">         #创建了虚拟头结点</span><br><span class="line">         while current and current.next:</span><br><span class="line">             if current.next.val==val:</span><br><span class="line">                 current.next=current.next.next</span><br><span class="line">             else : current=current.next</span><br><span class="line">         return dummy.next</span><br><span class="line">         </span><br></pre></td></tr></table></figure><p><strong>这里创建了虚拟头结点，目的就是为了方便删除头结点的情况，便于统一管理所有结点</strong></p><h2 id="0328-奇偶链表"><a href="#0328-奇偶链表" class="headerlink" title="0328. 奇偶链表"></a><a href="https://leetcode.cn/problems/odd-even-linked-list/">0328. 奇偶链表</a></h2><p>**给定单链表的头节点 **<code>head</code> ，将所有索引为奇数的节点和索引为偶数的节点分别分组，保持它们原有的相对顺序，然后把偶数索引节点分组连接到奇数索引节点分组之后，返回重新排序的链表。</p><p><strong>第一个</strong>节点的索引被认为是 <strong>奇数</strong> ， <strong>第二个</strong>节点的索引为 <strong>偶数</strong> ，以此类推。</p><p><strong>请注意，偶数组和奇数组内部的相对顺序应该与输入时保持一致。</strong></p><p>**你必须在 **<code>O(1)</code> 的额外空间复杂度和 <code>O(n)</code> 的时间复杂度下解决这个问题。</p><hr><p><strong>示例 1:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [1,2,3,4,5]</span><br><span class="line"> 输出: [1,3,5,2,4]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入: head = [2,1,3,5,6,4,7]</span><br><span class="line"> 输出: [2,3,6,7,1,5,4]</span><br></pre></td></tr></table></figure><hr><p><strong>提示:</strong></p><ul><li><code>n == </code> 链表中的节点数</li><li><code>0 &lt;= n &lt;= 104</code></li><li><code>-106 &lt;= Node.val &lt;= 106</code></li></ul><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def oddEvenList(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return head</span><br><span class="line">         odd = head</span><br><span class="line">         even = head.next</span><br><span class="line">         even_head = even  # 保存偶数链的起点</span><br><span class="line">         while even and even.next:</span><br><span class="line">             odd.next = even.next</span><br><span class="line">             odd = odd.next</span><br><span class="line"> </span><br><span class="line">             even.next = odd.next</span><br><span class="line">             even = even.next</span><br><span class="line"> </span><br><span class="line">         # 连接奇数链尾部到偶数链头</span><br><span class="line">         odd.next = even_head</span><br><span class="line">         return head</span><br></pre></td></tr></table></figure><p><strong>很容易想到快慢指针，但是要先保存偶数链起点的引用，不然就容易丢失</strong></p><h2 id="0234-回文链表"><a href="#0234-回文链表" class="headerlink" title="0234. 回文链表"></a><a href="https://leetcode.cn/problems/palindrome-linked-list/">0234. 回文链表</a></h2><p>**给你一个单链表的头节点 **<code>head</code> ，请你判断该链表是否为回文链表。如果是，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2,2,1]</span><br><span class="line"> 输出：true</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 输入：head = [1,2]</span><br><span class="line"> 输出：false</span><br></pre></td></tr></table></figure><p><strong>题解：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> # Definition for singly-linked list.</span><br><span class="line"> # class ListNode:</span><br><span class="line"> #     def __init__(self, val=0, next=None):</span><br><span class="line"> #         self.val = val</span><br><span class="line"> #         self.next = next</span><br><span class="line"> class Solution:</span><br><span class="line">     def isPalindrome(self, head: Optional[ListNode]) -&gt; bool:</span><br><span class="line">         # 特殊情况：空链表或只有一个节点，必然是回文</span><br><span class="line">         if not head or not head.next:</span><br><span class="line">             return True</span><br><span class="line">         dummy=ListNode(0)</span><br><span class="line">         dummy.next=head</span><br><span class="line">         left,right=dummy,dummy</span><br><span class="line">         while right and right.next:</span><br><span class="line">             right=right.next.next</span><br><span class="line">             left=left.next</span><br><span class="line">         current=head</span><br><span class="line">         second_half_list = []</span><br><span class="line">         while left.next:</span><br><span class="line">             </span><br><span class="line">             second_half_list.append(left.next.val)</span><br><span class="line">             left = left.next</span><br><span class="line">         while second_half_list:</span><br><span class="line">             if current.val != second_half_list.pop():</span><br><span class="line">                 return False</span><br><span class="line">             current = current.next</span><br><span class="line"> </span><br><span class="line">         return True</span><br><span class="line">                      </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><strong>其实可以直接将整个链表转换成列表，然后用双指针判断是否为回文。</strong></p><p><strong>也可以构造辅助函数，实现原地翻转，这样的空间复杂度是 O(1)。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> # 反转链表的辅助函数</span><br><span class="line">     def reverse(self, head: Optional[ListNode]) -&gt; Optional[ListNode]:</span><br><span class="line">         prev = None</span><br><span class="line">         curr = head</span><br><span class="line">         while curr:</span><br><span class="line">             next_temp = curr.next</span><br><span class="line">             curr.next = prev</span><br><span class="line">             prev = curr</span><br><span class="line">             curr = next_temp</span><br><span class="line">         return prev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0203-移除链表元素&quot;&gt;&lt;a href=&quot;#0203-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;0203. 移除链表元素&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/remove-linked-</summary>
      
    
    
    
    <category term="leetcode" scheme="https://zjncs.github.io/categories/leetcode/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
  </entry>
  
  <entry>
    <title>Blog搭建指南</title>
    <link href="https://zjncs.github.io/2025/08/05/Blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/"/>
    <id>https://zjncs.github.io/2025/08/05/Blog%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97/</id>
    <published>2025-08-05T03:28:22.000Z</published>
    <updated>2025-08-05T05:03:01.395Z</updated>
    
    <content type="html"><![CDATA[<p><strong>这篇文章将手把手记录我如何搭建自己的技术博客，涵盖 Hexo 博客初始化、主题美化、内容管理到自动部署的完整流程，希望对也想打造自己博客的你有所帮助。</strong></p><hr><h2 id="一、Hexo-初始化与基础配置"><a href="#一、Hexo-初始化与基础配置" class="headerlink" title="一、Hexo 初始化与基础配置"></a>一、Hexo 初始化与基础配置</h2><p><strong>Hexo 是一款基于 Node.js 的静态博客框架，轻量、快速，非常适合开发者记录技术文章。</strong></p><h3 id="初始化项目结构"><a href="#初始化项目结构" class="headerlink" title="初始化项目结构"></a>初始化项目结构</h3><p><strong>确保本地安装了 Node.js 和 Git，然后全局安装 Hexo：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> npm install -g hexo-cli</span><br><span class="line"> hexo init my-blog</span><br><span class="line"> cd my-blog</span><br><span class="line"> npm install</span><br></pre></td></tr></table></figure><p><strong>项目初始化完成后，会看到几个关键目录和文件，比如：</strong></p><ul><li><code>source/</code>：文章目录</li><li><code>themes/</code>：主题目录</li><li><code>_config.yml</code>：博客全局配置文件</li></ul><h3 id="基本信息配置"><a href="#基本信息配置" class="headerlink" title="基本信息配置"></a>基本信息配置</h3><p>**打开根目录下的 **<code>_config.yml</code>，修改以下内容来设置站点信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> title: Johnny-Zhao&#x27;s TechBlog</span><br><span class="line"> subtitle: KEEP FIGHTING</span><br><span class="line"> author: Johnny-Zhao</span><br><span class="line"> language: zh-CN</span><br><span class="line"> url: https://zjncs.github.io</span><br></pre></td></tr></table></figure><p><strong>接着，安装依赖（推荐使用 yarn）：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> yarn install</span><br></pre></td></tr></table></figure><p><strong>这样 Hexo 的核心环境就搭好了。</strong></p><hr><h2 id="二、美化博客：Butterfly-主题配置"><a href="#二、美化博客：Butterfly-主题配置" class="headerlink" title="二、美化博客：Butterfly 主题配置"></a>二、美化博客：Butterfly 主题配置</h2><p><strong>一个好看的博客主题，不光提升观感，还能激发写作动力。我选择的是 Butterfly —— 颜值高、功能全、社区活跃。</strong></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>**从 **<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly 仓库</a> 克隆到 <code>themes</code> 目录，并在 <code>_config.yml</code> 中指定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> theme: butterfly</span><br></pre></td></tr></table></figure><h3 id="个性化配置"><a href="#个性化配置" class="headerlink" title="个性化配置"></a>个性化配置</h3><p>**主题的详细配置写在 **<code>_config.butterfly.yml</code> 中，这里记录几个关键改动：</p><ul><li><strong>夜间模式</strong>：支持自动&#x2F;手动切换</li><li><strong>首页背景图 + 动态头像</strong>：加点动画效果，看着更灵动</li><li><strong>副标题打字机效果</strong>：配上「愿你历尽千帆，归来仍是少年」等短句</li><li><strong>侧边栏组件</strong>：作者简介、公告栏、分类、标签、归档一应俱全</li><li><strong>评论系统</strong>：集成 Giscus，评论数据保存在 GitHub 仓库中</li><li><strong>代码块美化</strong>：mac 风格 + 一键复制 + 语言标识</li><li><strong>数学公式支持</strong>：开启 KaTeX，写公式不再痛苦</li></ul><h3 id="Hexo-Pro：桌面端可视化管理利器"><a href="#Hexo-Pro：桌面端可视化管理利器" class="headerlink" title="Hexo Pro：桌面端可视化管理利器"></a>Hexo Pro：桌面端可视化管理利器</h3><p>**除了传统命令行操作，我还使用了 **<a href="https://github.com/jiangtj/hexo-pro">Hexo Pro</a> —— 一款基于 Electron 的桌面客户端。它支持：</p><ul><li><strong>图形化管理文章、分类、标签；</strong></li><li><strong>一键新建、编辑、发布文章；</strong></li><li><strong>直接预览博客样式；</strong></li><li><strong>支持 Hexo 插件管理与主题切换；</strong></li><li><strong>提供 Windows&#x2F;macOS 版本，开箱即用。</strong></li></ul><p><strong>这对不熟悉命令行或希望更高效率地管理博客内容的用户非常友好，特别适合日常频繁写作的技术人。</strong></p><hr><h3 id="Qexo：极致轻量的后端服务推荐"><a href="#Qexo：极致轻量的后端服务推荐" class="headerlink" title="Qexo：极致轻量的后端服务推荐"></a>Qexo：极致轻量的后端服务推荐</h3><p>**如果你想更进一步，让博客拥有完整的后台管理系统，不妨试试 **<a href="https://github.com/anyesu/qexo">Qexo</a>。</p><p><strong>Qexo 是一个为 Hexo 博客设计的轻量级后台，它的特点包括：</strong></p><ul><li><strong>支持在线创建&#x2F;修改文章；</strong></li><li><strong>自带图床功能，方便插入图片；</strong></li><li><strong>可搭配 Cloudflare Pages、Vercel、GitHub Pages 等平台部署；</strong></li><li><strong>极简风格 UI，操作直观、性能出色；</strong></li><li><strong>支持 GitHub&#x2F;Gitee 登录；</strong></li><li><strong>与 Hexo 博客仓库无缝连接，自动提交 PR 实现文章管理。</strong></li></ul><p><strong>这对于想在手机或浏览器上随时写作的朋友来说，非常实用。</strong></p><hr><blockquote><p>**💡 **<strong>个人建议</strong>：Hexo Pro 更适合桌面端写作和内容管理，Qexo 则提供了一个轻量在线 CMS 管理界面，两者可以结合使用，让你的博客写作体验更上一层楼。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;这篇文章将手把手记录我如何搭建自己的技术博客，涵盖 Hexo 博客初始化、主题美化、内容管理到自动部署的完整流程，希望对也想打造自己博客的你有所帮助。&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、Hexo-初始化与基础配置&quot;&gt;&lt;a href=&quot;#</summary>
      
    
    
    
    <category term="杂类" scheme="https://zjncs.github.io/categories/%E6%9D%82%E7%B1%BB/"/>
    
    
    <category term="2508" scheme="https://zjncs.github.io/tags/2508/"/>
    
    <category term="环境配置" scheme="https://zjncs.github.io/tags/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
